"use strict";
var express = require('express');
var path = require('path');
var bodyParser = require('body-parser');
var port = process.env.PORT || 3000;
var app = express();
var mongoose = require('mongoose');
var passport = require('passport');
mongoose.connect('mongodb://heroku_77q6gvb7:jep2th2uruap3ghqf84l7mcjg8@ds135798.mlab.com:35798/heroku_77q6gvb7' || 'mongodb://localhost:27017/todos2');
require('./models/project.model.js');
require('./models/task.model.js');
require('./models/user.model.js');
require('./config/passport')(passport);
var appRoutes = require('./routes/app');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(function (req, res, next) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    //res.setHeader('Access-Control-Allow-Methods', 'GET, POST');
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type, Authorization');
    next();
});
app.use('/app', express.static(path.resolve(__dirname, 'app')));
app.use('/libs', express.static(path.resolve(__dirname, 'libs')));
// for system.js to work. Can be removed if bundling.
app.use(express.static(path.resolve(__dirname, '.')));
app.use(express.static(path.resolve(__dirname, '../node_modules')));
app.use(passport.initialize());
app.use('/', appRoutes);
var db = mongoose.connection;
//mongoose.Promise = global.Promise;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
    console.log('Connected to MongoDB');
    // APIs
    // select all
    // app.get('/test', function(req, res) {
    //   Cat.find({}, function(err, docs) {
    //     if(err) return console.error(err);
    //     res.json(docs);
    //   });
    // });
    // var renderIndex = (req: express.Request, res: express.Response) => {
    //     res.sendFile(path.resolve(__dirname, 'index.html'));
    // }
    // app.get('/*', renderIndex);
    // app.post('/projects', function(req, res, next) {
    // 	res.send(req.body);
    // })
    var server = app.listen(port, function () {
        var host = server.address().address;
        var port = server.address().port;
        console.log('This express app is listening on port:' + port);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Qyx5Q0FBeUM7SUFDekMsc0JBQXNCO0lBQ3RCLFFBQVE7SUFDUixNQUFNO0lBRVIsdUVBQXVFO0lBQ3ZFLDJEQUEyRDtJQUMzRCxJQUFJO0lBRUosOEJBQThCO0lBRTlCLG1EQUFtRDtJQUNuRCx1QkFBdUI7SUFDdkIsS0FBSztJQUlMLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQzFCLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUM7UUFDcEMsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztRQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcbnZhciBwb3J0OiBudW1iZXIgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDA7XG5cbnZhciBhcHAgPSBleHByZXNzKCk7XG5cbnZhciBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG52YXIgcGFzc3BvcnQgPSByZXF1aXJlKCdwYXNzcG9ydCcpO1xubW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovL2hlcm9rdV83N3E2Z3ZiNzpqZXAydGgydXJ1YXAzZ2hxZjg0bDdtY2pnOEBkczEzNTc5OC5tbGFiLmNvbTozNTc5OC9oZXJva3VfNzdxNmd2YjcnIHx8ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L3RvZG9zMicpO1xucmVxdWlyZSgnLi9tb2RlbHMvcHJvamVjdC5tb2RlbC5qcycpO1xucmVxdWlyZSgnLi9tb2RlbHMvdGFzay5tb2RlbC5qcycpO1xucmVxdWlyZSgnLi9tb2RlbHMvdXNlci5tb2RlbC5qcycpO1xucmVxdWlyZSgnLi9jb25maWcvcGFzc3BvcnQnKShwYXNzcG9ydCk7XG5cblxudmFyIGFwcFJvdXRlcyA9IHJlcXVpcmUoJy4vcm91dGVzL2FwcCcpO1xuXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcblxuYXBwLnVzZShmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgLy9yZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJywgJ0dFVCwgUE9TVCcpO1xuICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnLCAnWC1SZXF1ZXN0ZWQtV2l0aCxjb250ZW50LXR5cGUsIEF1dGhvcml6YXRpb24nKTtcbiAgICBuZXh0KCk7XG59KTtcblxuYXBwLnVzZSgnL2FwcCcsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdhcHAnKSkpO1xuYXBwLnVzZSgnL2xpYnMnLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnbGlicycpKSk7XG5cbi8vIGZvciBzeXN0ZW0uanMgdG8gd29yay4gQ2FuIGJlIHJlbW92ZWQgaWYgYnVuZGxpbmcuXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuJykpKTtcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL25vZGVfbW9kdWxlcycpKSk7XG5hcHAudXNlKHBhc3Nwb3J0LmluaXRpYWxpemUoKSk7XG5cbmFwcC51c2UoJy8nLCBhcHBSb3V0ZXMpO1xuXG52YXIgZGIgPSBtb25nb29zZS5jb25uZWN0aW9uO1xuLy9tb25nb29zZS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG5cblxuZGIub24oJ2Vycm9yJywgY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsICdjb25uZWN0aW9uIGVycm9yOicpKTtcbmRiLm9uY2UoJ29wZW4nLCBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZCB0byBNb25nb0RCJyk7XG5cbiAgLy8gQVBJc1xuICAvLyBzZWxlY3QgYWxsXG4gIC8vIGFwcC5nZXQoJy90ZXN0JywgZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgLy8gICBDYXQuZmluZCh7fSwgZnVuY3Rpb24oZXJyLCBkb2NzKSB7XG4gIC8vICAgICBpZihlcnIpIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XG4gIC8vICAgICByZXMuanNvbihkb2NzKTtcbiAgLy8gICB9KTtcbiAgLy8gfSk7XG5cbi8vIHZhciByZW5kZXJJbmRleCA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XG4vLyAgICAgcmVzLnNlbmRGaWxlKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdpbmRleC5odG1sJykpO1xuLy8gfVxuXG4vLyBhcHAuZ2V0KCcvKicsIHJlbmRlckluZGV4KTtcblxuLy8gYXBwLnBvc3QoJy9wcm9qZWN0cycsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4vLyBcdHJlcy5zZW5kKHJlcS5ib2R5KTtcbi8vIH0pXG5cblxuXG52YXIgc2VydmVyID0gYXBwLmxpc3Rlbihwb3J0LCBmdW5jdGlvbigpIHtcbiAgICB2YXIgaG9zdCA9IHNlcnZlci5hZGRyZXNzKCkuYWRkcmVzcztcbiAgICB2YXIgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydDtcbiAgICBjb25zb2xlLmxvZygnVGhpcyBleHByZXNzIGFwcCBpcyBsaXN0ZW5pbmcgb24gcG9ydDonICsgcG9ydCk7XG59KTtcbn0pOyJdfQ==
